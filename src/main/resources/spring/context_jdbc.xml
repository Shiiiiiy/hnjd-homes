<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:aop="http://www.springframework.org/schema/aop"
	   xmlns:tx="http://www.springframework.org/schema/tx"
	   xmlns:context="http://www.springframework.org/schema/context"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
            http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-2.5.xsd
            http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-2.5.xsd
            http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-2.5.xsd"
           
	   default-autowire="byName" default-lazy-init="false">

	<!-- 属性文件读入 -->
	
	<context:property-placeholder location="classpath*:db/jdbc_oracle.properties,classpath*:config/webservice_config.properties,classpath*:config/timer_config.properties"/>
	
	<!-- 数据库连接池 -->
	 <bean id="dataSource"  class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
		<property name="driverClassName"	value="${jdbc.driverClassName}" />
 		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}"/>
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="maxWait" value="${jdbc.maxWait}" />
		<property name="timeBetweenEvictionRunsMillis" value="1000"/>
		<property name="testWhileIdle" value="${jdbc.testWhileIdle}"/>
		<property name="validationQuery" value="${jdbc.validationQuery}"/>
	</bean>
	<!-- 基本事务定义,使用transactionManager作事务管理。如果不采用AOP模式，则删除以下内容。
		   默认get*方法的事务为readonly,其余方法按默认设置. 默认的设置请参考Spring文档事务一章. -->
	
    <tx:advice id="txAdvice"  transaction-manager="txManager">
		<tx:attributes>
			<tx:method name="get*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="find*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="is*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="check*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="query*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="select*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="list*" propagation="SUPPORTS" read-only="true"/>
			<tx:method name="*" propagation="REQUIRED" rollback-for="Exception"/>
		</tx:attributes>
	</tx:advice>  
  
	<!-- 以AspectJ方式 定义 AOP，保留ps的bean配置，添加自己的bean配置 -->
	<aop:config proxy-target-class="true">
		<aop:advisor pointcut="execution(* com.uws..*ServiceImpl.*(..))" advice-ref="txAdvice"/>
	</aop:config>
		
	<bean id="sessionFactory"
  class="org.springframework.orm.hibernate3.LocalSessionFactoryBean">
  <property name="dataSource" ref="dataSource" />
  <property name="mappingJarLocations">
       <list>
          <value>WEB-INF/lib/rod*.jar</value>
       
       </list>
  </property>
  
  <property name="hibernateProperties">       
	<props>         
		 <prop key="hibernate.show_sql">false</prop>	
		 <!-- 
		 <prop key="hibernate.cache.use_second_level_cache">true</prop>
		 <prop key="hibernate.cache.use_query_cache">true</prop> 
 		 <prop key="hibernate.cache.provider_class">net.sf.ehcache.hibernate.EhCacheProvider</prop>
 		 <prop key="hibernate.max_fetch_depth">0</prop>    
         <prop key="hibernate.generate_statistics">true</prop>     
         <prop key="cglib.use_reflection_optimizer">false</prop>     
         <prop key="hibernate.query.factory_class">org.hibernate.hql.ast.ASTQueryTranslatorFactory</prop> 
          -->   
	</props>   
	
	
  </property> 
 
  <property name="mappingLocations" value="classpath:/**/*.hbm.xml"/>
  </bean>      
    <!-- Transaction manager for a single Hibernate SessionFactory (alternative to JTA) -->
    
  <bean id="txManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager">
    <property name="sessionFactory" ref="sessionFactory" />
  </bean>
	<bean name="mhJdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate" id="mhJdbcTemplate">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
	</bean>
 	<!-- Activates scanning of @Autowired -->
    <context:annotation-config/>

    <!-- Activates scanning of @Repository 
    <context:component-scan base-package="com.uws"/>
    -->
    
<!-- 数据字典工具方法声明 -->
<bean name="dicFactory"  class="com.uws.sys.service.impl.DicFactory" lazy-init="false"/>    
<!-- 文件操作工具方法声明 -->
<bean name="fileFactory"  class="com.uws.sys.service.impl.FileFactory" lazy-init="false" >
	<constructor-arg ref="fileService"/>
</bean>

<!-- 单点登录 
<bean id="CASFilter" class="com.uws.uaclient.filter.AuthenticationFilter" init-method="initSSOConfig"/>
<bean id="CASValidationFilter" class="com.uws.uaclient.filter.TicketValidationFilter" init-method="initSSOConfig"/>
<bean id="initLoginUserFilter" class="com.uws.uabdpsso.filter.DefaultInitUserInfoFilter" init-method="initSSOConfig"/>
 单点登录 -->

<context:component-scan base-package="com.uws" use-default-filters="false">
 <!-- 扫描符合@Service @Repository的类 -->
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Service" />
	<context:include-filter type="annotation" expression="org.springframework.stereotype.Repository" />
	<!-- 
	<context:include-filter type="regex" expression="com.ps.*Config"/>
	 
	<context:include-filter type="regex" expression="spring.*"/>
	-->
</context:component-scan>
    

    
</beans>